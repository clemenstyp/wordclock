name: Publish Dev Firmware

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'static/**'
      - '.github/workflows/publish-pages.yml'
      
permissions:
  contents: write

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.files-array.outputs.files }}
      version: ${{ steps.version.outputs.version }}
      artifact-prefix: ${{ steps.artifact-name.outputs.artifact-prefix }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Generate version
        id: version
        run: |-
          version=dev-$(TZ='Europe/Berlin' date +'%Y%m%d-%H%M')
          echo version=$version >> $GITHUB_OUTPUT
      - name: Generate Changelog
        id: changelog
        run: |
          last_version=$(git tag --sort=taggerdate | grep -v '^dev-'  | head -n 1)
          {
            echo 'changelog_o<<EOF'
            echo "## Changes since version ${last_version}"
            echo "" 
            git log ${last_version}..HEAD --pretty=format:"%h" | while IFS= read -r hash
            do
                commit_message=$(git log -1 --pretty=format:"%B" $hash)
                echo "[$hash]: $commit_message" | sed 's/^/- /'
            done
            echo ""
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
          echo changelog="Change" >> $GITHUB_OUTPUT
  build-firmware:
    name: Build Firmware
    needs: [prepare]
    uses: esphome/workflows/.github/workflows/build.yml@2025.4.0
    with:
      #### Modify below here to match your project ####
      files: |
        wordclock-esp8266-d1-mini.dev.yaml
      esphome-version: stable
      combined-name: wordclock
      
      release-summary: '${{ needs.prepare.outputs.changelog }}'
      release-url: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${{ needs.prepare.outputs.version }}
      release-version: ${{ needs.prepare.outputs.version }}
      #### Modify above here to match your project ####

  upload-to-release:
    name: Upload to Release
    needs:
      - build-firmware
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Delete old Dev-Releases
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            // Wrap the logic in an async function
            async function deleteOldDevReleases() {
              try {
                const repositoryTags = await github.rest.repos.listTags({
                  owner,
                  repo,
                });

                if (repositoryTags && repositoryTags.data) {
                  for (const tag of repositoryTags.data) {
                   
                    if (tag.name.startsWith('dev-')) {
                      try {
                        console.log(`Try to remove Tag with name: ${tag.name}.`);
                        // Fetch the latest release information
                        const taggedRelease = await github.rest.repos.getReleaseByTag({
                          owner,
                          repo,
                          tag: tag.name,
                        });

                        // Check if the latest release information was successfully retrieved
                        if (taggedRelease && taggedRelease.data && taggedRelease.data.id) {
                          // If there is a latest release, then delete it
                          await github.rest.repos.deleteRelease({
                            owner,
                            repo,
                            release_id: taggedRelease.data.id,
                          });
                          console.log(`Release id ${taggedRelease.data.id} has been deleted.`);
                        } else {
                          // If no latest release was found or retrieval failed, output a message
                          console.log("No latest release found or failed to retrieve it.");
                        }
                      } catch (error) {
                        console.error(`Failed to retrieve or delete tag: ${tag.name} - error: ${error}`);
                      }
                    }
                  }
                }
              } catch (error) {
                console.error(`Failed to list tags - error: ${error}`);
              }
            }

            // Call the async function
            deleteOldDevReleases();
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download Artifact
        uses: actions/download-artifact@v4.3.0
        with:
          path: files
      - name: Copy files to output
        run: |-
          shopt -s nullglob
          mkdir output
          version="${{ needs.build-firmware.outputs.version }}"
          pushd files
          for device in *; do
            pushd $device
            pushd $version
            cp manifest.json ../../../output/$device.manifest.json
            for bin in *.{bin,elf}; do
              md5sum $bin | head -c 32 > ../../../output/$bin.md5
              cp $bin ../../../output/
            done
            popd
            popd
          done
          popd
      - name: Generate Changelog
        run: |
          last_version=$(git tag --sort=taggerdate | grep -v '^dev-'  | head -n 1)
          echo "## Beta Installation" > ${{ github.workspace }}-CHANGELOG.txt
          echo "[Beta Install Page](https://clemenstyp.github.io/wordclock/beta.html)" >> ${{ github.workspace }}-CHANGELOG.txt
          echo "" >> ${{ github.workspace }}-CHANGELOG.txt
          echo "## Changelog" >> ${{ github.workspace }}-CHANGELOG.txt
          echo "" >> ${{ github.workspace }}-CHANGELOG.txt
          echo "<details><summary>Changes since version ${last_version}</summary><p>" >> ${{ github.workspace }}-CHANGELOG.txt
          echo "" >> ${{ github.workspace }}-CHANGELOG.txt
          git log ${last_version}..HEAD --pretty=format:"%h" | while IFS= read -r hash
          do
              commit_message=$(git log -1 --pretty=format:"%B" $hash)
              echo "[$hash]: $commit_message" | sed 's/^/- /' >> ${{ github.workspace }}-CHANGELOG.txt
          done
          echo "" >> ${{ github.workspace }}-CHANGELOG.txt
          echo "</p></details><summary></summary>" >> ${{ github.workspace }}-CHANGELOG.txt
          echo "" >> ${{ github.workspace }}-CHANGELOG.txt
      - name: Upload files to release
        uses: softprops/action-gh-release@v2.2.2
        with:
          files: output/*
          tag_name: ${{ needs.build-firmware.outputs.version }}
          prerelease: true
          name: "Dev-Version: ${{ needs.build-firmware.outputs.version }}"
          body_path: ${{ github.workspace }}-CHANGELOG.txt