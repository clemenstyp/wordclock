name: Publish Firmware

on:
  push:
    branches:
      - develop
      - main
    paths-ignore:
      - 'static/**'
      - '.github/workflows/publish-pages.yml'    
  release:
    types: [published]

permissions:
  contents: write

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      last_version: ${{ steps.generate_variables.outputs.last_version }}
      new_version: ${{ steps.generate_variables.outputs.new_version }}
      short_changelog: ${{ steps.generate_variables.outputs.short_changelog }}
      full_changelog: ${{ steps.generate_variables.outputs.full_changelog }}
      file: ${{ steps.generate_variables.outputs.file }}
      release_name: ${{ steps.generate_variables.outputs.release_name }}
      prerelease: ${{ steps.generate_variables.outputs.prerelease }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Generate Variables
        id: generate_variables
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          if [ "${GITHUB_EVENT_NAME}" == "pull_request" ] || [ "${GITHUB_EVENT_NAME}" == "pull_request_target" ]; then
            BRANCH_NAME=${{github.base_ref}}
          fi
          if [ "${BRANCH_NAME}" == "main" ]; then
            # F√ºhre Aktionen f√ºr den main-Branch aus
            last_version=$(git rev-list --tags --no-walk | xargs -I {} sh -c 'git tag --contains {} '| grep -E '^[0-9]'  | head -n 1)

            echo last_version=$last_version >> $GITHUB_OUTPUT

            # Split the version into an array
            IFS='.' read -r -a version_parts <<< "$last_version"

            # Increment the patch version (the last part)
            patch=${version_parts[2]}
            patch=$((patch + 1))

            # Construct the new version
            new_version="${version_parts[0]}.${version_parts[1]}.$patch"

            echo new_version=$new_version >> $GITHUB_OUTPUT

            echo file="wordclock-esp8266-d1-mini.factory.yaml" >> $GITHUB_OUTPUT

            echo release_name="WordClock Version $new_version" >> $GITHUB_OUTPUT
            echo prerelease=false >> $GITHUB_OUTPUT

          elif [ "${BRANCH_NAME}" == "develop" ]; then
            # F√ºhre Aktionen f√ºr den develop-Branch aus
            last_version=$(git rev-list --tags --no-walk | xargs -I {} sh -c 'git tag --contains {} '| grep  '^dev-'  | head -n 1)
            
            echo last_version=$last_version >> $GITHUB_OUTPUT

            new_version=dev-$(TZ='Europe/Berlin' date +'%Y%m%d-%H%M')

            echo new_version=$new_version >> $GITHUB_OUTPUT

            echo file="wordclock-esp8266-d1-mini-dev.factory.yaml" >> $GITHUB_OUTPUT
            echo release_name="Dev-Version: $new_version" >> $GITHUB_OUTPUT
            echo prerelease=true >> $GITHUB_OUTPUT
          else
            # F√ºhre Aktionen f√ºr andere Branches aus
            last_version=$(git rev-list --tags --no-walk | xargs -I {} sh -c 'git tag --contains {} '| grep  "^$BRANCH_NAME-"  | head -n 1)
            
            new_version=$BRANCH_NAME-$(TZ='Europe/Berlin' date +'%Y%m%d-%H%M')
            echo new_version=$new_version >> $GITHUB_OUTPUT
            echo file="wordclock-esp8266-d1-mini.factory.yaml" >> $GITHUB_OUTPUT
            echo release_name="$BRANCH_NAME-Version: $new_version" >> $GITHUB_OUTPUT
            echo prerelease=true >> $GITHUB_OUTPUT
          fi 

          if [ "${GITHUB_EVENT_NAME}" == "release" ] && [ "${GITHUB_EVENT_ACTION}" == "published" ]; then
            #  "This is a release event!"
            # F√ºhre Aktionen f√ºr ein Release aus, z.B. Deployment oder Benachrichtigung
            full_changelog=${{ github.event.release.body }}
            {
              echo 'short_changelog<<EOF'
              changelog=$(echo "$full_changelog" | awk '{if ($0 !~ /^ *$/ && $0 !~ /^[- ]/) print "- " $0; else if ($0 !~ /^ *$/) print $0}')
              if [ ${#changelog} -gt 100 ]; then
                echo "${changelog:0:100}[...]"
              else
                echo "$changelog"
              fi
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
            {
              echo 'full_changelog<<EOF'
              echo "$full_changelog"
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
          else
            {
              echo 'short_changelog<<EOF'
              echo "## Changes since version ${last_version}"
              echo "" 
              commit_messages=$(git log ${last_version}..HEAD --pretty=format:"%B")
              # Process each line to add '-' if the line is not empty and doesn't start with a space or a '-', and remove empty lines
              commit_messages=$(echo "$commit_messages" | awk '{if ($0 !~ /^ *$/ && $0 !~ /^[- ]/) print "- " $0; else if ($0 !~ /^ *$/) print $0}')
              if [ ${#commit_messages} -gt 100 ]; then
                echo "${commit_messages:0:100}[...]"
              else
                echo "$commit_messages"
              fi
              echo ""
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"

            {
              echo 'full_changelog<<EOF'
              if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
                echo "## üïí WordClock Version $new_version Release Notes"
                echo "To install the current version with ESP-Web visit the [Install Page](https://clemenstyp.github.io/wordclock/index.html)."
              elif [ "${GITHUB_REF}" == "refs/heads/develop" ]; then
                echo "## Beta Installation"
                echo "[Beta Install Page](https://clemenstyp.github.io/wordclock/beta.html)"
              else
                # F√ºhre Aktionen f√ºr andere Branches aus
                echo "## Installation"
              fi 
              echo ""
              echo "## Changelog"
              echo ""
              echo "<details><summary>Changes since version ${last_version}</summary><p>"
              echo ""
              git log ${last_version}..HEAD --pretty=format:"%h" | while IFS= read -r hash
              do
                  commit_message=$(git log -1 --pretty=format:"%B" $hash)
                  echo "[$hash]: $commit_message" | sed 's/^/- /'
              done
              echo ""
              echo "</p></details><summary></summary>"
              echo ""

              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
          fi

          


  build-firmware:
    name: Build Firmware
    needs: [prepare]
    uses: esphome/workflows/.github/workflows/build.yml@2025.4.0
    with:
      #### Modify below here to match your project ####
      files: |
        ${{ needs.prepare.outputs.file }}
      esphome-version: stable #2025.4.0
      combined-name: wordclock
      #### Modify above here to match your project ####
      release-summary: '${{ needs.prepare.outputs.short_changelog }}'
      release-url: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${{ needs.prepare.outputs.new_version }}
      release-version:  ${{ needs.prepare.outputs.new_version }}

  upload-to-release:
    name: Upload to Release
    needs:
      - build-firmware
      - prepare
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Delete old Dev-Releases
        if: ${{ github.ref == 'refs/heads/develop' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            // Wrap the logic in an async function
            async function deleteOldDevReleases() {
              try {
                const repositoryTags = await github.rest.repos.listTags({
                  owner,
                  repo,
                });

                if (repositoryTags && repositoryTags.data) {
                  for (const tag of repositoryTags.data) {
                   
                    if (tag.name.startsWith('dev-')) {
                      try {
                        console.log(`Try to remove Tag with name: ${tag.name}.`);
                        // Fetch the latest release information
                        const taggedRelease = await github.rest.repos.getReleaseByTag({
                          owner,
                          repo,
                          tag: tag.name,
                        });

                        // Check if the latest release information was successfully retrieved
                        if (taggedRelease && taggedRelease.data && taggedRelease.data.id) {
                          // If there is a latest release, then delete it
                          await github.rest.repos.deleteRelease({
                            owner,
                            repo,
                            release_id: taggedRelease.data.id,
                          });
                          console.log(`Release id ${taggedRelease.data.id} has been deleted.`);
                        } else {
                          // If no latest release was found or retrieval failed, output a message
                          console.log("No latest release found or failed to retrieve it.");
                        }
                      } catch (error) {
                        console.error(`Failed to retrieve or delete tag: ${tag.name} - error: ${error}`);
                      }
                    }
                  }
                }
              } catch (error) {
                console.error(`Failed to list tags - error: ${error}`);
              }
            }

            // Call the async function
            deleteOldDevReleases();
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download Artifact
        uses: actions/download-artifact@v4.3.0
        with:
          path: files
      - name: Copy files to output
        run: |-
          shopt -s nullglob
          mkdir output
          version="${{ needs.prepare.outputs.new_version }}"
          pushd files
          for device in *; do
            pushd $device
            pushd $version
            cp manifest.json ../../../output/$device.manifest.json
            for bin in *.{bin,elf}; do
              md5sum $bin | head -c 32 > ../../../output/$bin.md5
              cp $bin ../../../output/
            done
            popd
            popd
          done
          popd
      - name: Generate Changelog
        run: |
          echo "${{ needs.prepare.outputs.full_changelog }}" >> ${{ github.workspace }}-CHANGELOG.txt
      - name: Upload files to release
        uses: softprops/action-gh-release@v2.2.2
        with:
          files: output/*
          tag_name: ${{ needs.prepare.outputs.new_version }}
          prerelease: ${{ needs.prepare.outputs.prerelease }}
          name: ${{ needs.prepare.outputs.release_name }}
          body_path: ${{ github.workspace }}-CHANGELOG.txt
          target_commitish: ${{github.sha}}