substitutions:
  led_pin: GPIO0
  i2c_scl_pin: GPIO1
  i2c_sda_pin: GPIO2

esphome:
  on_boot:
    - priority: 600
      then:
      # read the RTC time once when the system boots
        - ds1307.read_time:
           id: ds1307_time
    - priority: 780
      then:
        - light.control:
            id: word_clock
            effect: WordClock
            state: on
            brightness: !lambda "return id(id(minimum_brightness).state);"
            red: !lambda "return id(word_clock_color_red);"
            green: !lambda "return id(word_clock_color_green);"
            blue: !lambda "return id(word_clock_color_blue);"
    - priority: 300
      then:
        - if: 
            condition:
              and: 
                - switch.is_on: automatic_brightness
            then:
              - script.execute: 
                  id: set_auto_brightness
                  transition_length: 0
            else:
              - light.control:
                  id: word_clock
                  brightness: !lambda "return id(word_clock_brightness);"


# example boot priority:
# 800.0: This is where all hardware initialization of vital components is executed. For example setting switches to their initial state.
# 600.0: This is where most sensors are set up.
# 250.0: At this priority, WiFi is initialized.
# 200.0: Network connections like MQTT/native API are set up at this priority.
# -100.0: At this priority, pretty much everything should already be initialized.
      
# used for ds1307 i2c
# sda kann auch GPIO4 sein
# scl kann auch GPIO5 sein 
i2c:
  sda: ${i2c_sda_pin}
  scl: ${i2c_scl_pin}
  scan: false
  id: i2c_bus
  frequency: 300kHz

preferences:
  flash_write_interval: 20s

time:
  - platform: ds1307
    # repeated synchronization is not necessary unless the external RTC
    # is much more accurate than the internal clock
    update_interval: never
    id: ds1307_time
    i2c_id: i2c_bus
    timezone: 'Europe/Berlin'
    address: 0x68
    on_time:
      # Every 1 minutes
      - seconds: 0
        minutes: /1
        then:
          - script.execute: 
              id: set_auto_brightness
              transition_length: 1000
      - seconds: 0
        minutes: /1
        then:
          - script.execute: 
              id: calculate_wordclock_letter
  - platform: sntp
    # instead try to synchronize via network repeatedly ...
    id: sntp_time
    timezone: 'Europe/Berlin'
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org
    on_time_sync:
      then:
        # ... and update the RTC when the synchronization was successful
        ds1307.write_time:
          id: ds1307_time

globals:
  - id: time_offset
    type: int
    restore_value: yes
    initial_value: '0'
  - id: previousMinutes
    type: uint8_t
    restore_value: no
    initial_value: '0'
  - id: currentFade
    type: int
    restore_value: no
    initial_value: '0'
  - id: fadeTransition
    type: int
    restore_value: no
    initial_value: '0'
  - id: new_letters
    type: uint8_t[126]
    restore_value: no
  - id: old_letters
    type: uint8_t[126]
    restore_value: no
  - id: word_clock_color_red
    type: float
    restore_value: yes
    initial_value: '1.0'
  - id: word_clock_color_green
    type: float
    restore_value: yes
    initial_value: '0.54'
  - id: word_clock_color_blue
    type: float
    restore_value: yes
    initial_value: '0.05'
  - id: word_clock_brightness
    type: float
    restore_value: yes
    initial_value: '0.5'

switch:
  - platform: template
    name: "Manual Time"
    id: manual_time
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    web_server: { sorting_weight: 30, sorting_group_id: "sorting_group_extra_settings" }
    icon: "mdi:clock-edit-outline"
    on_turn_off:
      - script.execute: 
          id: calculate_wordclock_letter
      - script.execute: 
          id: set_auto_brightness
          transition_length: 1000
    on_turn_on:
      - script.execute: 
          id: calculate_wordclock_letter
      - script.execute: 
          id: set_auto_brightness
          transition_length: 1000
  - platform: template
    name: "Auto Brightness"
    id: automatic_brightness
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: "mdi:brightness-auto"
    web_server: { sorting_weight: 10, sorting_group_id: "sorting_group_dnd_settings" }
    on_turn_off:
      - light.control:
          id: word_clock
          brightness: !lambda "return id(word_clock_brightness);"
    on_turn_on:
      - script.execute: 
          id: set_auto_brightness
          transition_length: 1000
  - platform: template
    name: "Show: It is"
    id: indication_it_is
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: "mdi:file-word-box-outline"
    web_server: { sorting_weight: 10, sorting_group_id: "sorting_group_extra_settings" }
    entity_category: config
  - platform: template
    name: "Show: Minutes"
    id: indication_minutes
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: "mdi:file-word-box-outline"
    web_server: { sorting_weight: 11, sorting_group_id: "sorting_group_extra_settings" }
    entity_category: config
  - platform: template
    name: "Show: Week Days"
    id: indication_week_days
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:file-word-box-outline"
    web_server: { sorting_weight: 12, sorting_group_id: "sorting_group_extra_settings" }
    entity_category: config

button:
  - platform: factory_reset
    id: factory_reset_button
    name: Factory Reset Word Clock
    disabled_by_default: true
    web_server: { sorting_weight: 20, sorting_group_id: "sorting_group_advanced_settings" }
  - platform: restart
    id: restart_button
    name: Restart Word Clock
    disabled_by_default: true
    web_server: { sorting_weight: 10, sorting_group_id: "sorting_group_advanced_settings" }
  - platform: template
    name: "Set Manual Time"
    id: manual_datetime_update
    on_press:
      - lambda: |-
            id(time_offset) = int(id(manual_datetime).state_as_esptime().timestamp - id(sntp_time).now().timestamp);
    web_server: {sorting_weight: 32, sorting_group_id: "sorting_group_extra_settings" }
    icon: "mdi:clock-edit-outline"

sensor:
  - platform: template
    name: "Time Offset (seconds)"
    id: time_offset_text
    update_interval: 60s
    web_server: {sorting_weight: 33, sorting_group_id: "sorting_group_extra_settings" } 
    lambda: |-
      return id(time_offset);
    icon: mdi:clock-start
    entity_category: ""

text_sensor:
  - platform: template
    name: "Current Time"
    id: current_time_text
    update_interval: 60s
    icon: "mdi:clock-outline"
    web_server: { sorting_weight: 29, sorting_group_id: "sorting_group_extra_settings" }
    lambda: |-
      int timestamp_with_offset = id(sntp_time).now().timestamp;
      if (id(manual_time).state){
        timestamp_with_offset +=  int(id(time_offset));
      }
      auto time = ESPTime::from_epoch_local(timestamp_with_offset);
      return  time.strftime("%Y-%m-%d %H:%M");

datetime:
  - platform: template
    id: manual_datetime
    type: datetime
    name: Manual Time
    optimistic: true
    web_server: {sorting_weight: 31, sorting_group_id: "sorting_group_extra_settings" }
    icon: "mdi:clock-edit-outline"
    initial_value: "2025-01-01 09:00:00"
  - platform: template
    id: dim_up_start_time
    type: time
    name: Dim-Up Begin
    optimistic: yes
    initial_value: "06:00:00"
    restore_value: true
    web_server: { sorting_weight: 33, sorting_group_id: "sorting_group_dnd_settings" }   
    icon: "mdi:weather-sunset-up"
  - platform: template
    id: dim_up_end_time
    type: time
    name: Dim-Up End
    optimistic: yes
    initial_value: "09:00:00"
    restore_value: true
    web_server: { sorting_weight: 34, sorting_group_id: "sorting_group_dnd_settings" }
    icon: "mdi:weather-sunny"
  - platform: template
    id: dim_down_start_time
    type: time
    name: Dim-Down Begin
    optimistic: yes
    initial_value: "18:00:00"
    restore_value: true
    web_server: { sorting_weight: 31, sorting_group_id: "sorting_group_dnd_settings" }
    icon: "mdi:weather-sunset-down"
  - platform: template
    id: dim_down_end_time
    type: time
    name: Dim-Down End
    optimistic: yes
    initial_value: "22:00:00"
    restore_value: true
    web_server: { sorting_weight: 32, sorting_group_id: "sorting_group_dnd_settings" }
    icon: "mdi:weather-night"

script:
  - id: set_auto_brightness
    mode: single
    parameters: 
      transition_length: int
    then:
      - if: 
          condition:
            and: 
              - switch.is_on: automatic_brightness
          then:
            - light.control:
                id: word_clock
                transition_length: !lambda return transition_length;
                brightness: !lambda |-
                  //ESP_LOGD("AUTO BRIGHTNESS", "begin");
                  float min_brightness = id(minimum_brightness).state;
                  float max_brightness = id(maximum_brightness).state;
                  float brightness = id(maximum_brightness).state;

                  int timestamp_with_offset = id(sntp_time).now().timestamp;
                  if (id(manual_time).state){
                    timestamp_with_offset +=  int(id(time_offset));
                  }
                  
                  auto time = ESPTime::from_epoch_local(timestamp_with_offset);
                  int time_minute_of_day = (time.hour * 60) + time.minute % 1440;
            
                  int dim_up_start_minute_of_day = (id(dim_up_start_time).hour * 60) + id(dim_up_start_time).minute;
                  int dim_up_end_minute_of_day = ( id(dim_up_end_time).hour * 60) +  id(dim_up_end_time).minute;
                  int dim_down_start_minute_of_day = (id(dim_down_start_time).hour * 60) + id(dim_down_start_time).minute;
                  int dim_down_end_minute_of_day = (id(dim_down_end_time).hour * 60) + id(dim_down_end_time).minute;


                  if (time_minute_of_day >= dim_down_end_minute_of_day || time_minute_of_day < dim_up_start_minute_of_day) {
                    brightness = min_brightness;  // Low brightness at night
                  } else if (time_minute_of_day >= dim_down_start_minute_of_day ) {
                    // Calculate evening brightness based on time difference
                    float total_duration = float(dim_down_end_minute_of_day - dim_down_start_minute_of_day);
                    float time_passed = float(time_minute_of_day - dim_down_start_minute_of_day);    

                    brightness = max_brightness - ((max_brightness - min_brightness) * (time_passed / total_duration));  // Gradually decrease brightness
                  } else if (time_minute_of_day < dim_up_end_minute_of_day) {
                    // Calculate evening brightness based on time difference
                    float total_duration = float(dim_up_end_minute_of_day - dim_up_start_minute_of_day);
                    float time_passed = float(time_minute_of_day - dim_up_start_minute_of_day);
                                        
                    brightness = min_brightness + ((max_brightness - min_brightness) * (time_passed / total_duration));  // Gradually increse brightness
                  } 
                  //ESP_LOGD("AUTO BRIGHTNESS", "end");
                  return brightness;
  - id: calculate_wordclock_letter
    mode: single
    then:
      - lambda: |-
          //ESP_LOGD("CALCULATE WORDCLOCK LETTER", "begin");
          static uint8_t previousMinutes;

          // LED IDs            
          //   110 | E S K I S T L F Ü N F | 120
          //   109 | Z E H N Z W A N Z I G |  99
          //   88  | D R E I V I E R T E L |  98
          //   87  | T G N A C H V O R J M |  77
          //   66  | H A L B X Z W Ö L F P |  76
          //   65  | Z W E I N S I E B E N |  55
          //   44  | K D R E I R H F Ü N F |  54
          //   43  | E L F N E U N V I E R |  33
          //   22  | W A C H T Z E H N R S |  32
          //   21  | B S E C H S F M U H R |  11
          //   0   | E V M D M D F S S P I |  10
          //   121 |       . . . . .       | 125 

          static const uint8_t single_words[35][2] {
            {110,111}, // [0]  ES 
            {113,115}, // [1]  IST 
            { 11, 13}, // [2]  UHR
            { 82, 85}, // [3]  NACH
            { 79, 81}, // [4]  VOR
            {117,120}, // [5]  FÜNF
            {106,109}, // [6]  ZEHN
            { 92, 98}, // [7]  VIERTEL
            { 99,105}, // [8]  ZWANZIG 
            { 66, 69}, // [9]  HALB
            { 71, 75}, // [10] ZWÖLF
            { 60, 63}, // [11] EINS
            { 62, 65}, // [12] ZWEI
            { 45, 48}, // [13] DREI
            { 33, 36}, // [14] VIER
            { 51, 54}, // [15] FÜNF
            { 16, 20}, // [16] SECHS
            { 55, 60}, // [17] SIEBEN
            { 23, 26}, // [18] ACHT
            { 37, 40}, // [19] NEUN
            { 27, 30}, // [20] ZEHN
            { 41, 43}, // [21] ELF
            { 61, 63}, // [22] EIN
            {  8,  8}, // [23] - S (Sonntag)
            {  2,  2}, // [24] - M (Montag)
            {  3,  3}, // [25] - D (Dienstag)
            {  4,  4}, // [26] - M (Mittwoch)
            {  5,  5}, // [27] - D (Donnnerstag)
            {  6,  6}, // [28] - F (Freitag)
            {  7,  7}, // [29] - S (Samstag)
            {123,123}, // [30] - MIN 
            {124,124}, // [31] - MIN + 1
            {125,125}, // [32] - MIN + 2
            {121,122}, // [33] - MIN - 2
            {122,122}  // [34] - MIN - 1
          };

          int timestamp_with_offset = id(sntp_time).now().timestamp - int(id(transition).state / 2);
          if (id(manual_time).state){
            timestamp_with_offset +=  int(id(time_offset));
          }
          auto time = ESPTime::from_epoch_local(timestamp_with_offset);


          // update letter array
          if (previousMinutes != time.minute) {
            previousMinutes = uint8_t(time.minute);
            memcpy(id(old_letters), id(new_letters), sizeof(id(new_letters)));
            std::fill_n(id(new_letters), 126, 0);
            id(currentFade) = id(fadeTransition); 

            auto add_word = [&](int single_word_id) -> void {
              for (uint8_t i = single_words[single_word_id][0]; i <=  single_words[single_word_id][1]; i++) {
                id(new_letters)[i] = 1;
              }
            };


            // show "es ist"
            if (id(indication_it_is).state) {
              add_word(0);
              add_word(1);
            } 
            
            // show weekday
            if (id(indication_week_days).state) {
              add_word(time.day_of_week + 22);
            }

            //show minutes
            if (id(indication_minutes).state) {
              add_word((time.minute % 5) + 30);
            } 

            if (time.minute <= 2 || time.minute >= 58){
              add_word(2);
            }else if (time.minute <= 7){
              add_word(5);
              add_word(3);
            }else if (time.minute <= 12){
              add_word(6);
              add_word(3);
            }else if (time.minute <= 17){
              add_word(7);
              add_word(3);
            }else if (time.minute <= 22){
              add_word(8);
              add_word(3);
            }else if (time.minute <= 27){
              add_word(5);
              add_word(4);
              add_word(9);
            }else if (time.minute <= 32){
              add_word(9);
            }else if (time.minute <= 37){
              add_word(5);
              add_word(3);
              add_word(9);
            }else if (time.minute <= 42){
              add_word(8);
              add_word(4);
            }else if (time.minute <= 47){
              add_word(7);
              add_word(4);
            }else if (time.minute <= 52){
              add_word(6);
              add_word(4);
            }else if (time.minute <= 57){
              add_word(5);
              add_word(4);
            }


            if ( ( time.minute <= 2 || time.minute >= 58 ) && ((time.hour % 12) == 1) ) {
              add_word(22);
            }else if (time.minute >= 23){ // für fünf vor halb...
              add_word(((time.hour +1 ) % 12) + 10);
            }else {
              add_word((time.hour % 12) + 10);
            } 

          }
          //ESP_LOGD("CALCULATE WORDCLOCK LETTER", "end");



number:
  - platform: template
    name: "Transition"
    id: transition
    optimistic: True
    min_value: 0
    max_value: 10
    initial_value: 1
    step: 0.5
    restore_value: True
    icon: "mdi:transition"
    web_server: { sorting_weight: 20, sorting_group_id: "sorting_group_main" }
  - platform: template
    name: "Min Brightness"
    id: minimum_brightness
    optimistic: True
    min_value: 0.0
    max_value: 1
    step: 0.01
    initial_value: 0.3
    restore_value: True
    icon: "mdi:brightness-4"
    web_server: { sorting_weight: 11, sorting_group_id: "sorting_group_dnd_settings" }
    on_value:
      - if: 
          condition:
            - lambda: "return id(maximum_brightness).state < x;"
          then:
            - number.set:
               id: maximum_brightness
               value: !lambda "return x;"
      - script.execute: 
          id: set_auto_brightness
          transition_length: 50
  - platform: template
    name: "Max Brightness"
    id: maximum_brightness
    optimistic: True
    min_value: 0.01
    max_value: 1
    initial_value: 1
    step: 0.01
    restore_value: True  
    icon: "mdi:brightness-5"
    web_server: { sorting_weight: 12, sorting_group_id: "sorting_group_dnd_settings" }
    on_value:
      - if: 
          condition:
            - lambda: "return x < id(minimum_brightness).state;"
          then:
            - number.set:
               id: minimum_brightness
               value: !lambda "return x;"
      - script.execute: 
          id: set_auto_brightness
          transition_length: 50

light:
  # - platform: fastled_clockless
  #   name: "Word Clock"
  #   id: word_clock
  #   rgb_order: GRB
  #   chipset: WS2812
  #   pin: $led_pin
  #   num_leds: 126 
  - platform: neopixelbus
    name: "Word Clock"
    id: word_clock
    type: GRB
    variant: WS2812X
    pin: $led_pin
    num_leds: 126 
    default_transition_length: 1s
    icon: "mdi:file-word-box-outline"
    # initial_state:
    #   effect: WordClock
    #   brightness: !lambda "return id(word_clock_brightness);"
    #   red: !lambda "return id(word_clock_color_red);"
    #   green: !lambda "return id(word_clock_color_green);"
    #   blue: !lambda "return id(word_clock_color_blue);"
    restore_mode: ALWAYS_ON
    web_server: { sorting_weight: 10, sorting_group_id: "sorting_group_main" }
    on_state:
      then:
        - if:
            condition:
              and:
                - light.is_on: word_clock
                - lambda: "return id(word_clock).get_effect_name() == \"None\";"
            then:
              - delay: 30ms
              # Enforce the light effect to be at "WordClock"
              - light.control:
                  id: word_clock
                  effect: WordClock
        - if:
            condition:
              and:
                - light.is_on: word_clock
                - lambda: "return id(word_clock).remote_values.get_red() != id(word_clock_color_red);"
            then:
              - globals.set:
                  id: word_clock_color_red
                  value: !lambda "return id(word_clock).remote_values.get_red();"
        - if:
            condition:
              and:
                - light.is_on: word_clock
                - lambda: "return id(word_clock).remote_values.get_green() != id(word_clock_color_green);"
            then:
              - globals.set:
                  id: word_clock_color_green
                  value: !lambda "return id(word_clock).remote_values.get_green();"
        - if:
            condition:
              and:
                - light.is_on: word_clock
                - lambda: "return id(word_clock).remote_values.get_blue() != id(word_clock_color_blue);"
            then:
              - globals.set:
                  id: word_clock_color_blue
                  value: !lambda "return id(word_clock).remote_values.get_blue();"
        - if: 
            condition:
              and: 
                - light.is_on: word_clock
                - switch.is_off: automatic_brightness
                - lambda: "return id(word_clock).remote_values.get_brightness() != id(word_clock_brightness);"
            then:
              - globals.set:
                  id: word_clock_brightness
                  value: !lambda "return id(word_clock).remote_values.get_brightness();"
    effects:
      - addressable_lambda:
          name: "WordClock"
          update_interval: 20ms
          lambda: |-
            //ESP_LOGD("EFFECT", "begin");
            const int update_interval_ms = 20;

            /*
             * Below is the transition control of the clock to change to the next time (next 5 minute section).
             * The update_interval is 50ms, which would mean that it takes 20 iterations in total to fade to the next time over a 1 second period.
             * The transition slider specifies the number of seconds the total fade takes (id: transition).
             * The value of the transition is multiplied by 20 (steps) to create the fader.
             */

            if (initial_run) {
              it.all() = Color::BLACK;
              std::fill_n(id(old_letters), 126, 0);
              id(calculate_wordclock_letter).execute();
              id(currentFade) = int(1000*id(transition).state/update_interval_ms);
              id(fadeTransition) = int(1000*id(transition).state/update_interval_ms);
            }
            // update fadeTransition if value is changed
            auto trans = int(1000*id(transition).state/update_interval_ms);
            if (trans != id(fadeTransition)) {
              id(fadeTransition) = trans;
              if (id(currentFade) > id(fadeTransition)){
                id(currentFade) = id(fadeTransition);
              }
            }


            for (int i = 0; i < it.size(); i++) {
              // old value: id(old_letters)[i]
              // new value: id(new_letters)[i]
              if (id(new_letters)[i] == 1){      
                  // should be ON at the end
                  if (id(old_letters)[i] == 0){
                    // fade IN
                    if (id(currentFade) > 0 && id(fadeTransition) > 0) {
                      it[i] = Color(int(current_color.r*(id(fadeTransition) - id(currentFade))/id(fadeTransition)), int(current_color.g*(id(fadeTransition) - id(currentFade))/id(fadeTransition)), int(current_color.b*(id(fadeTransition) - id(currentFade))/id(fadeTransition)));
                    }else{
                      it[i] = current_color;
                    }
                  }else{
                    // keep ON
                    it[i] = current_color;
                  }
              }else{
                  // should be OFF at the end
                  if (id(old_letters)[i] == 1){
                    // fade OUT
                    if (id(currentFade) > 0 && id(fadeTransition) > 0) {
                      it[i] = Color(int(current_color.r*id(currentFade)/id(fadeTransition)), int(current_color.g*id(currentFade)/id(fadeTransition)), int(current_color.b*id(currentFade)/id(fadeTransition)));
                    }else{
                      it[i] = Color::BLACK;
                    }
                  }else{
                    // keep OFF
                    it[i] = Color::BLACK;
                  }

              }
            }
            id(currentFade)--;
            //ESP_LOGD("EFFECT", "end");
      # - addressable_lambda:
      #     name: "WordClockOld"
      #     update_interval: 50ms
      #     lambda: |-
      #       static uint8_t previousMinutes;
      #       static uint8_t letters[2][126];
      #       static bool currentRound;
      #       static int currentFade;
      #       static int fadeTransition;

      #       // LED IDs            
      #       //   110 | E S K I S T L F Ü N F | 120
      #       //   109 | Z E H N Z W A N Z I G |  99
      #       //   88  | D R E I V I E R T E L |  98
      #       //   87  | T G N A C H V O R J M |  77
      #       //   66  | H A L B X Z W Ö L F P |  76
      #       //   65  | Z W E I N S I E B E N |  55
      #       //   44  | K D R E I R H F Ü N F |  54
      #       //   43  | E L F N E U N V I E R |  33
      #       //   22  | W A C H T Z E H N R S |  32
      #       //   21  | B S E C H S F M U H R |  11
      #       //   0   | E V M D M D F S S P I |  10
      #       //   121 |       . . . . .       | 125 

      #       const uint8_t single_words[35][2] {
      #         {110,111}, // [0]  ES 
      #         {113,115}, // [1]  IST 
      #         { 11, 13}, // [2]  UHR
      #         { 82, 85}, // [3]  NACH
      #         { 79, 81}, // [4]  VOR
      #         {117,120}, // [5]  FÜNF
      #         {106,109}, // [6]  ZEHN
      #         { 92, 98}, // [7]  VIERTEL
      #         { 99,105}, // [8]  ZWANZIG 
      #         { 66, 69}, // [9]  HALB
      #         { 71, 75}, // [10] ZWÖLF
      #         { 60, 63}, // [11] EINS
      #         { 62, 65}, // [12] ZWEI
      #         { 45, 48}, // [13] DREI
      #         { 33, 36}, // [14] VIER
      #         { 51, 54}, // [15] FÜNF
      #         { 16, 20}, // [16] SECHS
      #         { 55, 60}, // [17] SIEBEN
      #         { 23, 26}, // [18] ACHT
      #         { 37, 40}, // [19] NEUN
      #         { 27, 30}, // [20] ZEHN
      #         { 41, 43}, // [21] ELF
      #         { 61, 63}, // [22] EIN
      #         {  8,  8}, // [23] - S (Sonntag)
      #         {  2,  2}, // [24] - M (Montag)
      #         {  3,  3}, // [25] - D (Dienstag)
      #         {  4,  4}, // [26] - M (Mittwoch)
      #         {  5,  5}, // [27] - D (Donnnerstag)
      #         {  6,  6}, // [28] - F (Freitag)
      #         {  7,  7}, // [29] - S (Samstag)
      #         {123,123}, // [30] - MIN 
      #         {124,124}, // [31] - MIN + 1
      #         {125,125}, // [32] - MIN + 2
      #         {121,122}, // [33] - MIN - 2
      #         {122,122}  // [34] - MIN - 1
      #       };

      #       /*
      #        * Below is the transition control of the clock to change to the next time (next 5 minute section).
      #        * The update_interval is 50ms, which would mean that it takes 20 iterations in total to fade to the next time over a 1 second period.
      #        * The transition slider specifies the number of seconds the total fade takes (id: transition).
      #        * The value of the transition is multiplied by 20 (steps) to create the fader.
      #        */

      #       if (initial_run) {
      #         it.all() = Color::BLACK;
      #         std::fill_n(letters[0], 126, 0);
      #         std::fill_n(letters[1], 126, 0);
      #         currentFade = int(20*id(transition).state);
      #         fadeTransition = int(20*id(transition).state);
      #         currentRound = 0;
      #       }
      #       // update fadeTransition if value is changed
      #       auto trans = int(20*id(transition).state);
      #       if (trans != fadeTransition) {
      #         fadeTransition = trans;
      #         if (currentFade > fadeTransition){
      #           currentFade = fadeTransition;
      #         }
      #       }

      #       int timestamp_with_offset = id(sntp_time).now().timestamp - int(id(transition).state / 2);
      #       if (id(manual_time).state){
      #         timestamp_with_offset +=  int(id(time_offset));
      #       }
            
      #       auto time = ESPTime::from_epoch_local(timestamp_with_offset);
            
      #       // update letter array
      #       if (previousMinutes != time.minute) {
      #         currentRound = !currentRound;
      #         previousMinutes = uint8_t(time.minute);
      #         currentFade = fadeTransition;

      #         std::fill_n(letters[currentRound], 126, 0);

      #         auto add_word = [&](int single_word_id) -> void {
      #           for (uint8_t i = single_words[single_word_id][0]; i <=  single_words[single_word_id][1]; i++) {
      #             letters[currentRound][i] = 1;
      #           }
      #         };


      #         // show "es ist"
      #         if (id(indication_it_is).state) {
      #           add_word(0);
      #           add_word(1);
      #         } 
              
      #         // show weekday
      #         if (id(indication_week_days).state) {
      #           add_word(time.day_of_week + 22);
      #         }

      #         //show minutes
      #         if (id(indication_minutes).state) {
      #           add_word((time.minute % 5) + 30);
      #         } 

      #         if (time.minute <= 2 || time.minute >= 58){
      #           add_word(2);
      #         }else if (time.minute <= 7){
      #           add_word(5);
      #           add_word(3);
      #         }else if (time.minute <= 12){
      #           add_word(6);
      #           add_word(3);
      #         }else if (time.minute <= 17){
      #           add_word(7);
      #           add_word(3);
      #         }else if (time.minute <= 22){
      #           add_word(8);
      #           add_word(3);
      #         }else if (time.minute <= 27){
      #           add_word(5);
      #           add_word(4);
      #           add_word(9);
      #         }else if (time.minute <= 32){
      #           add_word(9);
      #         }else if (time.minute <= 37){
      #           add_word(5);
      #           add_word(3);
      #           add_word(9);
      #         }else if (time.minute <= 42){
      #           add_word(8);
      #           add_word(4);
      #         }else if (time.minute <= 47){
      #           add_word(7);
      #           add_word(4);
      #         }else if (time.minute <= 52){
      #           add_word(6);
      #           add_word(4);
      #         }else if (time.minute <= 57){
      #           add_word(5);
      #           add_word(4);
      #         }


      #         if ( ( time.minute <= 2 || time.minute >= 58 ) && ((time.hour % 12) == 1) ) {
      #           add_word(22);
      #         }else if (time.minute >= 23){ // für fünf vor halb...
      #           add_word(((time.hour +1 ) % 12) + 10);
      #         }else {
      #           add_word((time.hour % 12) + 10);
      #         } 

      #       }

      
      #       for (int i = 0; i < it.size(); i++) {
      #         // old value: letters[!currentRound][i]
      #         // new value: letters[currentRound][i]
      #         if (letters[currentRound][i] == 1){      
      #             // should be ON at the end
      #             if (letters[!currentRound][i] == 0){
      #               // fade IN
      #               if (currentFade > 0 && fadeTransition > 0) {
      #                 it[i] = Color(int(current_color.r*(fadeTransition - currentFade)/fadeTransition), int(current_color.g*(fadeTransition - currentFade)/fadeTransition), int(current_color.b*(fadeTransition - currentFade)/fadeTransition));
      #               }else{
      #                 it[i] = current_color;
      #               }
      #             }else{
      #               // keep ON
      #               it[i] = current_color;
      #             }
      #         }else{
      #             // should be OFF at the end
      #             if (letters[!currentRound][i] == 1){
      #               // fade OUT
      #               if (currentFade > 0 && fadeTransition > 0) {
      #                 it[i] = Color(int(current_color.r*currentFade/fadeTransition), int(current_color.g*currentFade/fadeTransition), int(current_color.b*currentFade/fadeTransition));
      #               }else{
      #                 it[i] = Color::BLACK;
      #               }
      #             }else{
      #               // keep OFF
      #               it[i] = Color::BLACK;
      #             }

      #         }

             
      #       }
      #       currentFade--;     
